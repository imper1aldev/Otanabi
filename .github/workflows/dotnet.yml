name: GitHub Release Publisher

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  # Configuring Project
  PROJECT_PATH: Otanabi/Otanabi.csproj
  APP_NAME: Otanabi

  # Check Tag
  CHECK_TAG_EXISTENCE_BEFORE_CREATING_TAG: false

  # Custom Nuget Source
  IS_COMMUNITY_TOOLKIT_NUGET_SOURCE_ENABLED: false
  IS_CUSTOM_NUGET_SOURCE_ENABLED: false
  CUSTOM_NUGET_SOURCES: "" # Example ('https://api.nuget.org/v3/index.json, https://api.nuget.org/v2/index.json,...')

  # Configuring Dotnet Build Commands
  PUBLISH_OUTPUT_FOLDER: Publish
  PUBLISH_SELF_CONTAINED: true
  PUBLISH_SINGLE_FILE: false
  PUBLISH_READY_TO_RUN: false
  PUBLISH_AOT: false # currently only Console App Supported
  PUBLISH_TRIMMED: false
  PUBLISH_TRIM_MODE: partial # or full

  # Configuring GitHub Release
  IS_PRE_RELEASE: false
  SKIP_IF_RELEASE_EXIST: true
  MAKE_LATEST: true
  ALLOW_UPDATES: false
  ARTIFACT_ERRORS_FAIL_BUILD: false

jobs:
  build:
    runs-on: windows-latest
    outputs: # For accessing them from 'release' job
      app-version: ${{ steps.get-version.outputs.version }}
      IS_PRE_RELEASE: ${{ env.IS_PRE_RELEASE }}
    strategy:
      matrix:
        platform: [x64] # Change platform if you want to build only a specific platform

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        if: ${{ ! env.ACT }}
        with:
          dotnet-version: "8.0.401"

      # Add CommunityToolkit Labs and Main nuget sources
      - run: |
          nuget sources add -name CommunityToolkit-Labs -source https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-Labs/nuget/v3/index.json
          nuget sources add -name CommunityToolkit-Main -source https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-MainLatest/nuget/v3/index.json
        if: contains(env.IS_COMMUNITY_TOOLKIT_NUGET_SOURCE_ENABLED, 'true')

      # Add Custom nuget sources
      - run: |
          $sources = $env:CUSTOM_NUGET_SOURCES -split ','
          $trimmedSources = $sources | ForEach-Object { $_.Trim() }
          $prefix = "CUSTOM_SOURCES_"
          for ($i = 0; $i -lt $trimmedSources.Length; $i++) {
            $sourceName = "${prefix}$($i + 1)"
            nuget sources add -name $sourceName -source $trimmedSources[$i]
          }
        if: contains(env.IS_CUSTOM_NUGET_SOURCE_ENABLED, 'true')

      # Reading version tag from the csproj file.
      - uses: kzrnm/get-net-sdk-project-versions-action@v2
        id: get-version
        with:
          proj-path: ${{ env.PROJECT_PATH }}

      # Building with configured commands
      - run: | 
          dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 /p:GITHUB_ACTIONS=true -p:Platform=x64 --self-contained ${{ env.PUBLISH_SELF_CONTAINED }} -p:PublishSingleFile=${{ env.PUBLISH_SINGLE_FILE }} -p:PublishReadyToRun=${{ env.PUBLISH_READY_TO_RUN }} -p:PublishTrimmed=${{ env.PUBLISH_TRIMMED }} -p:TrimMode=${{ env.PUBLISH_TRIM_MODE }} -p:PublishAot=${{ env.PUBLISH_AOT }} --output ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }} --property WarningLevel=0

      - name: Remove LangFolders
        uses: Lyoko-Jeremie/js-rm-github-action@master
        with:
          path: |
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/cs
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/da
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/de
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fa
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fi
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fr
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/it
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ko
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/mk
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/nl
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/pl
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/pt
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ru
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sv
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/tr
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/zh-CN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/zh-TW
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/vi-VN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/af-ZA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/uz-Latn-UZ
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ur-PK
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/uk-UA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ug-CN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/tt-RU
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/tr-TR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/th-TH
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/te-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ta-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sv-SE
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sr-Latn-RS
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sr-Cyrl-RS
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sr-Cyrl-BA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/am-ET
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/as-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/az-Latn-AZ
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/bg-BG
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/bn-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/am-ET
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ar-SA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/as-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/az-Latn-AZ
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/bg-BG
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/bn-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/bs-Latn-BA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ca-ES
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ca-Es-VALENCIA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/cs-CZ
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/cy-GB
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/da-DK
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/de-DE
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/el-GR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/et-EE
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/eu-ES
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fa-IR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fi-FI
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fil-PH
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fr-CA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/fr-FR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ga-IE
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/gd-gb
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/gl-ES
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/gu-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/he-IL
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/hi-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/hr-HR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/hu-HU
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/hy-AM
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/id-ID
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/is-IS
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/it-IT
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ja-JP
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ka-GE
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/kk-KZ
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/km-KH
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/kn-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ko-KR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/kok-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/lb-LU
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/lo-LA
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/lt-LT
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/lv-LV
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/mi-NZ
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/mk-MK
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ml-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/mr-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ms-MY
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/mt-MT
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/nb-NO
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ne-NP
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/nl-NL
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/nn-NO
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/or-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/pa-IN
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/pl-PL
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/pt-BR
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/pt-PT
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/quz-PE
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ro-RO
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/ru-RU
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sk-SK
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sl-SI
            ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}/sq-AL

      # Zipping folder and all files
      - uses: vimtor/action-zip@v1.2
        with:
          files: ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}
          recursive: true
          dest: ${{ env.APP_NAME }}-v${{ steps.get-version.outputs.version }}-${{ matrix.platform }}.zip

      # Uploading all zip files to access them in the 'release' job
      - uses: actions/upload-artifact@v4
        if: ${{ ! env.ACT }}
        with:
          name: artifacts-${{ matrix.platform }}
          path: ${{ env.APP_NAME }}-v${{ steps.get-version.outputs.version }}-${{ matrix.platform }}.zip

      # Checking version suffix for words like [alpha, beta, preview, and experiment]. Marking the release as a pre-release if any exists.
      - run: |
          # Define the list of strings
          $list = @("beta", "alpha", "preview", "experiment")

          # Define the suffix variable
          $suffix = "${{ steps.get-version.outputs.version-suffix }}"

          foreach ($item in $list) {
            # Convert both strings to lower case for case-insensitive comparison
            if ($suffix.ToLower().StartsWith($item.ToLower())) {
              echo "IS_PRE_RELEASE=true" >> $env:GITHUB_ENV
              break
            }
          }

  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      # Read some variables from the 'build' job
      APP_VERSION: ${{ needs.build.outputs.app-version }}
      IS_PRE_RELEASE: ${{ needs.build.outputs.IS_PRE_RELEASE }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Downloading all zip files into the GitHub root directory (uploaded in 'build' job)
      - uses: actions/download-artifact@v4
        if: ${{ ! env.ACT }}
        with:
          merge-multiple: true

      # Configuring git to create a tag
      - run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          TAG_NAME="v${{ env.APP_VERSION }}"
          if [[ "${{ env.CHECK_TAG_EXISTENCE_BEFORE_CREATING_TAG }}" == "true" ]]; then
              git fetch --tags
              if [[ $(git tag -l "$TAG_NAME") ]]; then
                  echo "Tag found (already exist). Skipping to the next step"
              else
                  echo "Tag not found, creating new tag"
                  git tag "$TAG_NAME"
                  git push origin "$TAG_NAME"
              fi
          else
              echo "Creating new tag"
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
          fi

      # Installing a package for generating a changelog file
      - run: npm install -g auto-changelog
      - run: auto-changelog --tag-pattern .+ --commit-limit false --starting-version v${{ env.APP_VERSION }} --ending-version v${{ env.APP_VERSION }} --hide-credit

      # Creating a Release in GitHub
      - uses: ncipollo/release-action@v1
        if: ${{ ! env.ACT }}
        with:
          artifacts: "${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-*.zip"
          bodyFile: "CHANGELOG.md"
          name: v${{ env.APP_VERSION }}
          tag: v${{ env.APP_VERSION }}
          prerelease: ${{ env.IS_PRE_RELEASE }}
          skipIfReleaseExists: ${{ env.SKIP_IF_RELEASE_EXIST }}
          makeLatest: ${{ env.MAKE_LATEST }}
          allowUpdates: ${{ env.ALLOW_UPDATES }}
          artifactErrorsFailBuild: ${{ env.ARTIFACT_ERRORS_FAIL_BUILD }}

      # - uses: softprops/action-gh-release@v1
      #   with:
      #     name: v${{ env.APP_VERSION }}
      #     tag_name: v${{ env.APP_VERSION }}
      #     body_path: CHANGELOG.md
      #     prerelease: ${{ env.PUBLISH_PRE_RELEASE }}
      #     files: |
      #       ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-*.zip
